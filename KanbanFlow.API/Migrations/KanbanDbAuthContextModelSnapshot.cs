// <auto-generated />
using System;
using KanbanFlow.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KanbanFlow.API.Migrations
{
    [DbContext(typeof(KanbanDbContext))]
    partial class KanbanDbAuthContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KanbanFlow.API.Models.Domain.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommentatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CommentatorId");

                    b.HasIndex("TaskId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("17b7acc2-42b3-41ba-956c-7d7291f4a898"),
                            CommentatorId = "6c3357e6-f24e-487e-926a-d6cf266790c1",
                            Date = new DateTime(2023, 8, 2, 13, 3, 5, 106, DateTimeKind.Local).AddTicks(7055),
                            Description = "We need to add new table to store logs!",
                            TaskId = new Guid("79705c41-29cb-4098-bb62-9bb3b099acb6")
                        },
                        new
                        {
                            Id = new Guid("8cc258cf-919f-45af-9cf4-b64069b4ead2"),
                            CommentatorId = "7a5b4d2b-a396-44e0-b918-4befcb2f9a4e",
                            Date = new DateTime(2023, 8, 2, 13, 3, 5, 106, DateTimeKind.Local).AddTicks(7061),
                            Description = "I need help here from team @Tech Titans",
                            TaskId = new Guid("7559cedd-4c01-4cb7-89de-be64afa35df4")
                        });
                });

            modelBuilder.Entity("KanbanFlow.API.Models.Domain.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProjectManagerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectManagerId");

                    b.ToTable("Projects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("77876cb3-c59b-4259-84d6-ef97d0ef54c8"),
                            ProjectManagerId = "977890c6-ed82-44d2-89d1-e9bcbe044342",
                            ProjectName = "AuroraX"
                        },
                        new
                        {
                            Id = new Guid("59601d29-d1ca-4278-aa7f-61b9dd88f9cd"),
                            ProjectManagerId = "977890c6-ed82-44d2-89d1-e9bcbe044342",
                            ProjectName = "Cybersphere"
                        });
                });

            modelBuilder.Entity("KanbanFlow.API.Models.Domain.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfReport")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReporterId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ReporterId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("79705c41-29cb-4098-bb62-9bb3b099acb6"),
                            DateOfReport = new DateTime(2023, 8, 2, 13, 3, 5, 106, DateTimeKind.Local).AddTicks(6957),
                            Description = "Create DbContext class to init the database.",
                            OwnerId = "977890c6-ed82-44d2-89d1-e9bcbe044342",
                            Priority = 2,
                            ProjectId = new Guid("77876cb3-c59b-4259-84d6-ef97d0ef54c8"),
                            ReporterId = "977890c6-ed82-44d2-89d1-e9bcbe044342",
                            Status = 1,
                            TeamId = new Guid("25ef9129-9a40-4016-a1ac-e16c1bd6c307"),
                            Title = "Init DB"
                        },
                        new
                        {
                            Id = new Guid("30627367-6325-4503-b55e-c4584fc72cb6"),
                            DateOfReport = new DateTime(2023, 8, 2, 13, 3, 5, 106, DateTimeKind.Local).AddTicks(7008),
                            Description = "Create first concept of UI that will be presented on a meeting.",
                            Priority = 2,
                            ProjectId = new Guid("77876cb3-c59b-4259-84d6-ef97d0ef54c8"),
                            ReporterId = "977890c6-ed82-44d2-89d1-e9bcbe044342",
                            Status = 0,
                            TeamId = new Guid("f4cf9c55-63b8-4a7f-9072-a9c3930b05ef"),
                            Title = "Create mocks of UI"
                        },
                        new
                        {
                            Id = new Guid("0f446d5b-d6b6-4830-bdd4-dd00ee577f4c"),
                            DateOfReport = new DateTime(2023, 8, 2, 13, 3, 5, 106, DateTimeKind.Local).AddTicks(7013),
                            Description = "We need to have options for login and register for users.",
                            Priority = 3,
                            ProjectId = new Guid("59601d29-d1ca-4278-aa7f-61b9dd88f9cd"),
                            ReporterId = "977890c6-ed82-44d2-89d1-e9bcbe044342",
                            Status = 0,
                            TeamId = new Guid("987bc5f6-2999-4943-9e95-b2e4b74ed567"),
                            Title = "Create Auth Controller."
                        },
                        new
                        {
                            Id = new Guid("7559cedd-4c01-4cb7-89de-be64afa35df4"),
                            DateOfReport = new DateTime(2023, 8, 2, 13, 3, 5, 106, DateTimeKind.Local).AddTicks(7018),
                            Description = "There is a bug when dispalying sum up statisitcs of a space ship. Sometimes the statistics won't load.",
                            OwnerId = "896cbb0f-ce93-43ec-8915-eb077fd3833d",
                            Priority = 3,
                            ProjectId = new Guid("59601d29-d1ca-4278-aa7f-61b9dd88f9cd"),
                            ReporterId = "7a5b4d2b-a396-44e0-b918-4befcb2f9a4e",
                            Status = 2,
                            TeamId = new Guid("d354e006-50ca-471d-b768-42e37cb1d750"),
                            Title = "Fix bug with displaying sum up statistics."
                        });
                });

            modelBuilder.Entity("KanbanFlow.API.Models.Domain.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = new Guid("25ef9129-9a40-4016-a1ac-e16c1bd6c307"),
                            TeamName = "Code Wizards"
                        },
                        new
                        {
                            Id = new Guid("987bc5f6-2999-4943-9e95-b2e4b74ed567"),
                            TeamName = "Tech Titans"
                        },
                        new
                        {
                            Id = new Guid("d354e006-50ca-471d-b768-42e37cb1d750"),
                            TeamName = "Bug Busters"
                        },
                        new
                        {
                            Id = new Guid("f4cf9c55-63b8-4a7f-9072-a9c3930b05ef"),
                            TeamName = "Pixel Pioneers"
                        });
                });

            modelBuilder.Entity("KanbanFlow.API.Models.Domain.TeamMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MemberId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MemberId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamMembers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a816cee5-8c76-41eb-8d98-97b973d7d4ae"),
                            MemberId = "4f2e8b12-fb8b-4f0d-891a-34afad4095f8",
                            TeamId = new Guid("25ef9129-9a40-4016-a1ac-e16c1bd6c307")
                        },
                        new
                        {
                            Id = new Guid("c9dea465-9682-471e-9417-a94802c901d5"),
                            MemberId = "6c3357e6-f24e-487e-926a-d6cf266790c1",
                            TeamId = new Guid("25ef9129-9a40-4016-a1ac-e16c1bd6c307")
                        },
                        new
                        {
                            Id = new Guid("a163dbb9-8c52-4d9e-9146-c551d73ed683"),
                            MemberId = "c75d74ac-587c-4793-89a2-c1aff590fef0",
                            TeamId = new Guid("25ef9129-9a40-4016-a1ac-e16c1bd6c307")
                        },
                        new
                        {
                            Id = new Guid("fd84ee40-5579-4433-97ae-a13498ea473f"),
                            MemberId = "6d018538-71da-4dbe-95a3-c334150375aa",
                            TeamId = new Guid("987bc5f6-2999-4943-9e95-b2e4b74ed567")
                        },
                        new
                        {
                            Id = new Guid("9006d8b3-783c-40b5-acda-1ee97d12828d"),
                            MemberId = "785e3ed9-9388-4ca9-922b-ab69cbd9651c",
                            TeamId = new Guid("987bc5f6-2999-4943-9e95-b2e4b74ed567")
                        },
                        new
                        {
                            Id = new Guid("758091fd-6ec8-4b9b-b78a-9471f42c484f"),
                            MemberId = "896cbb0f-ce93-43ec-8915-eb077fd3833d",
                            TeamId = new Guid("987bc5f6-2999-4943-9e95-b2e4b74ed567")
                        },
                        new
                        {
                            Id = new Guid("e896018d-168d-4c76-a2b2-59e8df944970"),
                            MemberId = "7a5b4d2b-a396-44e0-b918-4befcb2f9a4e",
                            TeamId = new Guid("d354e006-50ca-471d-b768-42e37cb1d750")
                        },
                        new
                        {
                            Id = new Guid("ea95ac6c-83ca-4221-85d1-f60011e8c103"),
                            MemberId = "ea708fc7-69bb-4f37-bef8-5bb2e6731aa1",
                            TeamId = new Guid("d354e006-50ca-471d-b768-42e37cb1d750")
                        },
                        new
                        {
                            Id = new Guid("81d15f82-3e9c-47c3-b299-b1581cd65c2c"),
                            MemberId = "ac77693f-523c-407f-ac9b-5730b9f2af62",
                            TeamId = new Guid("f4cf9c55-63b8-4a7f-9072-a9c3930b05ef")
                        },
                        new
                        {
                            Id = new Guid("da33d048-0f80-4699-a3d4-d96af6da8ddf"),
                            MemberId = "c1e5da6e-e4e4-4a94-a79e-e65ef7bd6746",
                            TeamId = new Guid("f4cf9c55-63b8-4a7f-9072-a9c3930b05ef")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "60ea4963-1a46-403c-86be-625a6cf345f3",
                            ConcurrencyStamp = "60ea4963-1a46-403c-86be-625a6cf345f3",
                            Name = "Developer",
                            NormalizedName = "DEVELOPER"
                        },
                        new
                        {
                            Id = "3f971339-1a3d-4a59-870b-99cb38412835",
                            ConcurrencyStamp = "3f971339-1a3d-4a59-870b-99cb38412835",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("KanbanFlow.API.Models.Domain.Comment", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Commentator")
                        .WithMany()
                        .HasForeignKey("CommentatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KanbanFlow.API.Models.Domain.Task", null)
                        .WithMany("Comments")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Commentator");
                });

            modelBuilder.Entity("KanbanFlow.API.Models.Domain.Project", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "ProjectManager")
                        .WithMany()
                        .HasForeignKey("ProjectManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectManager");
                });

            modelBuilder.Entity("KanbanFlow.API.Models.Domain.Task", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Reporter")
                        .WithMany()
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Reporter");
                });

            modelBuilder.Entity("KanbanFlow.API.Models.Domain.TeamMember", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KanbanFlow.API.Models.Domain.Team", null)
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KanbanFlow.API.Models.Domain.Task", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("KanbanFlow.API.Models.Domain.Team", b =>
                {
                    b.Navigation("TeamMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
